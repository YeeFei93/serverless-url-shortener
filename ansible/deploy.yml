---
# Ansible playbook for serverless URL shortener deployment
- name: Deploy Serverless URL Shortener Infrastructure
  hosts: localhost
  gather_facts: yes
  vars:
    aws_region: "{{ aws_region | default('us-east-1') }}"
    project_name: "serverless-url-shortener"
    environment: "{{ environment | default('prod') }}"
    
  tasks:
    - name: Check if AWS CLI is configured
      command: aws sts get-caller-identity
      register: aws_identity
      changed_when: false
      
    - name: Display AWS account information
      debug:
        msg: "Deploying to AWS Account: {{ (aws_identity.stdout | from_json).Account }}"
        
    - name: Ensure terraform directory exists
      file:
        path: "{{ playbook_dir }}/../terraform"
        state: directory
        
    - name: Build Lambda deployment packages
      command: "{{ playbook_dir }}/../build.sh"
      args:
        chdir: "{{ playbook_dir }}/.."
      register: build_result
      changed_when: true
      
    - name: Display build results
      debug:
        var: build_result.stdout_lines
        
    - name: Initialize Terraform
      command: terraform init
      args:
        chdir: "{{ playbook_dir }}/../terraform"
      register: terraform_init
      changed_when: "'Terraform has been successfully initialized' in terraform_init.stdout"
      
    - name: Plan Terraform deployment
      command: terraform plan -out=tfplan
      args:
        chdir: "{{ playbook_dir }}/../terraform"
      register: terraform_plan
      changed_when: true
      
    - name: Apply Terraform deployment
      command: terraform apply -auto-approve tfplan
      args:
        chdir: "{{ playbook_dir }}/../terraform"
      register: terraform_apply
      changed_when: true
      when: deploy | default(true)
      
    - name: Get Terraform outputs
      command: terraform output -json
      args:
        chdir: "{{ playbook_dir }}/../terraform"
      register: terraform_outputs
      changed_when: false
      when: terraform_apply is succeeded
      
    - name: Display deployment results
      debug:
        msg: |
          ðŸš€ Deployment completed successfully!
          
          Outputs:
          {{ terraform_outputs.stdout | from_json | to_nice_json }}
      when: terraform_apply is succeeded
      
    - name: Run health checks
      uri:
        url: "{{ item }}"
        method: GET
        timeout: 10
      register: health_check
      ignore_errors: yes
      loop:
        - "{{ (terraform_outputs.stdout | from_json).api_gateway_url.value }}/health"
        - "{{ (terraform_outputs.stdout | from_json).cloudfront_distribution_domain_name.value }}"
      when: terraform_apply is succeeded
      
    - name: Display health check results
      debug:
        msg: "Health check for {{ item.url }}: {{ 'PASSED' if item.status == 200 else 'FAILED' }}"
      loop: "{{ health_check.results }}"
      when: terraform_apply is succeeded and health_check is defined
